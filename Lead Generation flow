{
  "nodes": [
    {
      "parameters": {
        "jsCode": "/************************************************************\n * Build Apollo People-search URL from parser output\n * Handles both shapes:\n *   { query: [ { … } ] }      ← array\n *   { query: { … } }          ← object\n ************************************************************/\n\n// 1. Obtener el JSON que llega del nodo anterior\nconst inputData = $json;\n\n// 2. Normalizar para que paramsData siempre sea un objeto\nlet paramsData;\n\nif (Array.isArray(inputData.query)) {\n  // Caso antiguo: query es un array\n  paramsData = inputData.query[0];\n} else if (inputData.query) {\n  // Caso nuevo: query es un objeto\n  paramsData = inputData.query;\n} else {\n  throw new Error('Falta la propiedad \"query\" en el input');\n}\n\n// 3. URL base de Apollo (interfaz web)\n//    Para llamar a la API REST cambia a https://api.apollo.io/v1/mixed_people/search\nconst baseURL = 'https://app.apollo.io/#/people';\n\n// 4. Construir los parámetros dinámicos\nconst queryParts = [\n  'sortByField=recommendations_score',\n  'sortAscending=false',\n  'page=1',\n];\n\n// Helper para arrays → personTitles[]=ceo\nconst addArrayParams = (paramName, values) => {\n  values.forEach((val) => {\n    const decoded = val.replace(/\\+/g, ' ');          // “barcelona+spain” ⇒ “barcelona spain”\n    queryParts.push(`${paramName}[]=${encodeURIComponent(decoded)}`);\n  });\n};\n\n// job_title → personTitles[]\nif (Array.isArray(paramsData.job_title)) {\n  addArrayParams('personTitles', paramsData.job_title);\n}\n\n// location → personLocations[]\nif (Array.isArray(paramsData.location)) {\n  addArrayParams('personLocations', paramsData.location);\n}\n\n// business → qOrganizationKeywordTags[]\nif (Array.isArray(paramsData.business)) {\n  addArrayParams('qOrganizationKeywordTags', paramsData.business);\n}\n\n// campos estáticos\nqueryParts.push('includedOrganizationKeywordFields[]=tags');\nqueryParts.push('includedOrganizationKeywordFields[]=name');\n\n// 5. Montar la URL final\nconst finalURL = `${baseURL}?${queryParts.join('&')}`;\n\n// 6. Devolver resultado\nreturn [{ json: { finalURL } }];\n"
      },
      "id": "d44ed11c-c644-4873-9533-30a93e808e3e",
      "name": "Create URL",
      "type": "n8n-nodes-base.code",
      "position": [
        1560,
        320
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "336074e3-b3b9-4dde-92d7-fb5af51b8ffa",
              "name": "firstName",
              "type": "string",
              "value": "={{ $json.first_name }}"
            },
            {
              "id": "da8362c5-75a5-4431-847d-fd4e02112bcc",
              "name": "emailAddress",
              "type": "string",
              "value": "={{ $json.email }}"
            },
            {
              "id": "3c99e0e0-4184-4e85-baa0-8bb85e4e227b",
              "name": "linkedInURL",
              "type": "string",
              "value": "={{ $json.linkedin_url }}"
            },
            {
              "id": "a45af1ff-7026-47a0-a42c-bdb3b27c8e3d",
              "name": "seniority ",
              "type": "string",
              "value": "={{ $json.seniority }}"
            },
            {
              "id": "fa551406-a981-4fbb-babc-aa78ab10010d",
              "name": "jobTitle",
              "type": "string",
              "value": "={{ $json.employment_history[0].title }}"
            },
            {
              "id": "2e8d8d61-bd02-4f24-91f1-707152d99806",
              "name": "companyName",
              "type": "string",
              "value": "={{ $json.employment_history[0].organization_name }}"
            },
            {
              "id": "1295a702-636a-48bd-8bcd-df92162237fb",
              "name": "location",
              "type": "string",
              "value": "={{ $json.city }}, {{ $json.state }}"
            },
            {
              "id": "0072b657-0296-4858-b190-621831943816",
              "name": "country",
              "type": "string",
              "value": "={{ $json.country }}"
            },
            {
              "id": "22ce107c-30ef-4abe-9fab-8d49482da87c",
              "name": "Number",
              "type": "string",
              "value": "={{ $json.organization.primary_phone && $json.organization.primary_phone.sanitized_number && $json.organization.primary_phone.sanitized_number ? $json.organization.primary_phone.sanitized_number : null }}"
            },
            {
              "id": "302b9529-e16b-49ce-bbb6-ae2de90fed93",
              "name": "websiteURL",
              "type": "string",
              "value": "={{ $json.organization_website_url }}"
            },
            {
              "id": "13026de1-0927-44f7-8388-4d525f44974d",
              "name": "businessIndustry",
              "type": "string",
              "value": "={{ $json.industry }}"
            },
            {
              "id": "1a8ae803-f0bd-48d5-bf85-89b91c2e9c64",
              "name": "lastName",
              "type": "string",
              "value": "={{ $json.last_name }}"
            },
            {
              "id": "03cb9c0d-4c05-4d00-88a4-de33e34e7c16",
              "name": "emailStatus",
              "type": "string",
              "value": "={{ $json.email_status }}"
            }
          ]
        },
        "options": {}
      },
      "id": "7e84dd41-0ccc-49cc-bd4b-03d2aba15d85",
      "name": "Extract Info",
      "type": "n8n-nodes-base.set",
      "position": [
        2000,
        320
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "c49e7377-db5e-4458-bea5-9e297e19f620",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.emailStatus }}",
              "rightValue": "verified"
            }
          ]
        },
        "options": {}
      },
      "id": "61200ab2-8cf6-4045-b385-8c4435d190b2",
      "name": "Only Keep Verified Emails ",
      "type": "n8n-nodes-base.filter",
      "position": [
        2220,
        320
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {},
      "id": "082b0f20-c20d-4509-add7-ceab6109c3aa",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "position": [
        3120,
        400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}"
      },
      "id": "1aa05872-b768-42cb-a3e4-c4e8513b89c6",
      "name": "Download File1",
      "type": "n8n-nodes-base.telegram",
      "position": [
        480,
        160
      ],
      "webhookId": "00c7755c-cd84-4aa4-89fe-c56f1f0cb50d",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "9vXhTEPvvAF9IVdu",
          "name": "Srihari Telegram"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "cd9357b5-6e61-438f-ad58-e91f0920b59c",
      "name": "Transcribe1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        700,
        160
      ],
      "typeVersion": 1.6,
      "credentials": {
        "openAiApi": {
          "id": "IPe2kFDheuwhEVDY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fe7ecc99-e1e8-4a5e-bdd6-6fce9757b234",
              "name": "text",
              "type": "string",
              "value": "={{ $json.message.text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "7c1209e6-0f54-4f06-9730-2beace045dfe",
      "name": "Text1",
      "type": "n8n-nodes-base.set",
      "position": [
        600,
        400
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.message.voice.file_id }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Voice"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "8c844924-b2ed-48b0-935c-c66a8fd0c778",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "options": {}
      },
      "id": "d322ded1-e99d-4fb7-8b2c-91c922109424",
      "name": "Voice or Text1",
      "type": "n8n-nodes-base.switch",
      "position": [
        240,
        240
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {},
      "id": "db56a278-de3d-4911-9d2b-40598e23d4a5",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        940,
        320
      ],
      "typeVersion": 1.2,
      "credentials": {}
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"location\": [\"barcelona+spain\"],\n  \"business\": [\"ecommerce\"],\n  \"job_title\": [\"ceo\"]\n}"
      },
      "id": "d022fb30-cbb3-419d-b521-3575f3b9308b",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        1140,
        340
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "id": "f16adb19-d39f-4043-adbf-1dc7c1a5b1f1",
      "name": "Select already scraped mails",
      "type": "n8n-nodes-base.postgres",
      "position": [
        1760,
        40
      ],
      "typeVersion": 2.6,
      "credentials": {}
    },
    {
      "parameters": {
        "mergeByFields": {
          "values": [
            {}
          ]
        },
        "options": {}
      },
      "id": "05aeb944-6f6c-4409-bf01-c5ad39764ca6",
      "name": "Keep only the new leads",
      "type": "n8n-nodes-base.compareDatasets",
      "position": [
        2460,
        300
      ],
      "typeVersion": 2.3
    },
    {
      "parameters": {},
      "id": "24a4bb29-a591-440e-a49b-30be61776c14",
      "name": "Already scraped",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2800,
        200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "tableId": "leads_n_mail",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "firstName",
              "fieldValue": "={{ $json.firstName }}"
            },
            {
              "fieldId": "emailAddress"
            },
            {
              "fieldId": "linkedInURL"
            },
            {
              "fieldId": "jobTitle",
              "fieldValue": "={{ $json.jobTitle }}"
            },
            {
              "fieldId": "companyName",
              "fieldValue": "={{ $json.companyName }}"
            },
            {
              "fieldId": "location",
              "fieldValue": "={{ $json.location }}"
            },
            {
              "fieldId": "country",
              "fieldValue": "={{ $json.country }}"
            },
            {
              "fieldId": "websiteURL",
              "fieldValue": "={{ $json.websiteURL }}"
            },
            {
              "fieldId": "businessIndustry",
              "fieldValue": "={{ $json.businessIndustry }}{{ $('Apollo Scraper').item.json.organization.industry }}"
            },
            {
              "fieldId": "lastName",
              "fieldValue": "={{ $json.lastName }}"
            }
          ]
        }
      },
      "id": "0b8c09c3-4287-4a34-a7a5-736413a017da",
      "name": "Create rows with new leads",
      "type": "n8n-nodes-base.supabase",
      "position": [
        2720,
        400
      ],
      "typeVersion": 1,
      "credentials": {
        "supabaseApi": {
          "id": "QJKSJk6akM15V1A3",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "feb577bf-b3fb-40da-b37b-41d82345c627",
              "name": "output",
              "type": "string",
              "value": "={{ $input.all().length }} new contacts have been added to the Google Sheet!"
            }
          ]
        },
        "options": {}
      },
      "id": "c9533eed-b1fe-4eb3-8e52-8765f8c873d5",
      "name": "Set Telegram message",
      "type": "n8n-nodes-base.set",
      "position": [
        2940,
        400
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "chatId": "5656980243",
        "text": "={{ $input.all().length }} new contacts have been added to the Google Sheet!",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "1b1719af-12a4-4ba7-8664-acf2dab0c775",
      "name": "Confirmation message",
      "type": "n8n-nodes-base.telegram",
      "position": [
        3360,
        400
      ],
      "webhookId": "20bb0a77-76bc-4d9a-bdb4-f5e53a80d299",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "9vXhTEPvvAF9IVdu",
          "name": "Srihari Telegram"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "bcc0af0a-b13d-4f0e-b9f8-bfacdf61971f",
      "name": "User message",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        40,
        240
      ],
      "webhookId": "75096a78-a466-4f4e-bc0d-f68e9e952231",
      "typeVersion": 1.1,
      "credentials": {
        "telegramApi": {
          "id": "9vXhTEPvvAF9IVdu",
          "name": "Srihari Telegram"
        }
      }
    },
    {
      "parameters": {
        "content": "# First step: recieve the message via audio or text",
        "height": 600,
        "width": 860,
        "color": 3
      },
      "id": "bb61327a-1ba2-4355-bc3f-453d96c3b895",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# Create the json for the url",
        "height": 600,
        "width": 580
      },
      "id": "b335516d-b9e9-445b-97bf-32c31f247045",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        880,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Who’s it for\nGrowth hackers, SDR teams, and founders who collect lead requests via Telegram (voice or text) and want those leads scraped, verified, de-duplicated, and stored in a single Supabase table—hands-free.\n\n## How it works\n1. **Telegram trigger** captures a user’s text or voice note.  \n2. **OpenAI Whisper + GPT agent** parse the message and build a structured search query.  \n3. A **Code node** crafts a people-search URL, then an **HTTP request** calls the Apify Apollo-io Scraper to pull up to 500 contacts.  \n4. **Filters** keep only “verified” emails and compare them to a Postgres list of already-scraped addresses to avoid duplicates.  \n5. Fresh contacts are inserted into the Supabase table **Leads_n-mail**, and the bot replies with a count of new rows added. :contentReference[oaicite:0]{index=0}\n\n## How to set up\n1. Replace the hard-coded Apify token in **Apollo Scraper** with an environment variable.  \n2. Add OpenAI credentials for Whisper & GPT nodes.  \n3. Point the Postgres “dedupe” node at your existing email table (or skip it).  \n4. Update the Supabase connection and table name, then test with a sample voice note.\n\n### Supabase column headers  \n`firstName | lastName | emailAddress | linkedInURL | jobTitle | companyName | location | country | websiteURL | businessIndustry | seniority | number`\n\n## Requirements\n- Telegram Bot token  \n- OpenAI API key  \n- Apify account with Apollo-io Scraper actor  \n- Supabase project credentials (or swap for Airtable/Sheets)  \n- n8n v0.231+ self-hosted or Cloud\n\n## How to customize the workflow\n- **Change the prompt** to capture extra fields (e.g., funding stage).  \n- **Adjust totalRecords** in the HTTP node to pull more or fewer leads.  \n- **Swap storage**—write to Airtable, HubSpot, or Sheets instead of Supabase.  \n- **Add enrichment**—insert Clearbit or Hunter steps before the insert.\n\n",
        "height": 800,
        "width": 1400,
        "color": 6
      },
      "id": "fdc78f7e-4f5c-46f4-9bef-76996683b11a",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        40,
        640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Scrape the leads from apify actor",
        "height": 280,
        "width": 880,
        "color": 5
      },
      "id": "5e20674b-a0cc-464f-87ef-78866210575e",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1520,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Insert the new leads to your database\n\n*can be airtable/sheets/supabase",
        "height": 240
      },
      "id": "c9630faa-ac59-4d4d-96c1-aa6656eb5a4a",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2660,
        640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"query\": {{ $json.output }}\n}\n\n",
        "options": {}
      },
      "id": "67b36402-fce4-427c-bb6c-aa9a9db85b27",
      "name": "Generate query payload",
      "type": "n8n-nodes-base.set",
      "position": [
        1360,
        360
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "requestOptions": {}
      },
      "type": "n8n-nodes-apify.apify",
      "typeVersion": 1,
      "position": [
        1880,
        320
      ],
      "id": "5c41a942-145d-40ef-b1fa-96f61e679c4d",
      "name": "Run actor"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=session-default\n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1020,
        340
      ],
      "id": "1e8fcc3e-6648-40e7-8076-ef757c2c0560",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  input: {\n    url: $json.finalURL,\n    webhooks: {\n      finished: \"https://webhook.site/63b2821b-53ae-470f-962c-a350876363ed\"\n    }\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1720,
        320
      ],
      "id": "d3ac7d1f-6eaa-4234-a4c1-0b84fdf187da",
      "name": "Code"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        920,
        160
      ],
      "id": "19a9e9fa-4369-420d-acd5-493956d1e79f",
      "name": "AI Agent"
    }
  ],
  "connections": {
    "Create URL": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Info": {
      "main": [
        [
          {
            "node": "Only Keep Verified Emails ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Only Keep Verified Emails ": {
      "main": [
        [
          {
            "node": "Keep only the new leads",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Confirmation message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File1": {
      "main": [
        [
          {
            "node": "Transcribe1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Voice or Text1": {
      "main": [
        [
          {
            "node": "Download File1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Keep only the new leads": {
      "main": [
        [
          {
            "node": "Already scraped",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Already scraped",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Already scraped",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create rows with new leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create rows with new leads": {
      "main": [
        [
          {
            "node": "Set Telegram message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Telegram message": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User message": {
      "main": [
        [
          {
            "node": "Voice or Text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate query payload": {
      "main": [
        [
          {
            "node": "Create URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {}
}
